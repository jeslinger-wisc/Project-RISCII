Project RISCII: Project Design Document (v0.0.1)
================================================================================
Version Notes:
    -> 12/21/2021 (v0.0.1) created document
================================================================================
Objective:

        This document is meant to provide an overview of the project in terms of
    its overall requirements (what the system should be able to do),
    specifications (how the system will generally complete its requirements),
    and limitations (aspects the project can not realistically do or are not
    being done for the sake of simplicity/keeping the project shorter).
    
        Note: For simplicity's sake, many of the complex hardware/OS features
    are being saved for a later date for requirement/specification/etc. Some
    details have been specified, however, to minimize changes made to the
    Instruction Set Architecture (ISA) over time.

================================================================================
Hardware:

    Flashing:
        The hardware will have a JTAG-esque interface used for flashing the
    hardware's non-volatile memory (see below for pins). The flash state machine
    should be able to:
        1) halt the processor
        2) assert control over non-volatile memory access 
        3) efficiently erase the flash (ie don't 0-out ech byte manually)
        4) write specified data to any specified address
        5) assert a hardware reset
        
        As a JTAG-esque interface, opcodes/data can be passed in via shifting
    bits into registers per clock signal. The output pin can be used to denote
    if the flash state machine is ready to execute the next command. Registers
    for the opcode, data, and address should be present. It is advised to seek
    ways to minimize the number of bit shifts per program flashed.
    
        JTAG pins:
        (I)TDI: Input pin specifying bit to shift in
        (O)TDO: Output pin (specifying if the state machine is ready)
        (I)TMS: Select pin, used to help determine state
        (I)TCK: Clock pin, raised when TDI is ready to be shifted in
        (I)TRSTL Reset in, resets flash state machine
    
    Serial Communication:
        The hardware will have a single, SPI-esque transmitter to communicate
    output during runtime (see below for pins). It should support two 1 byte
    registers- a data register and a config register -which are memory mapped
    to addresses not available in RAM. In SPI fashion, an active-low chip select
    signal should be held low while sending data. Finally, for simplicity, the
    transmitter will always use the following settings:
        1) clock polarity = 1 (clock is high when not in use)
        2) clock phase = 1 (with polarity = 1, rising edges denote value)
        3) payload = 8 bits (only 8 bits should be sent at a time)
        4) endianess = little (LSB is sent first, MSB last)
        
        SPI pins:
        (O)ROEI: Output pin, defines output data
        (O)SCLK: Clock pin, defines when to intake data
        (O)CS: Chip select, defines when data is being output

    Processor/Hardware Architecture:
        The processor/hardware should model a 32-bit, RISC style architecture
    with 32-bit instructions. Specifically, for RISC, hardware and instructions
    should be kept simple. The processsor should follow a standard 5 stage
    pipeline (Fetch, Decode, Execute, Memory, Writeback) should be implemented
    (with some possible exceptions for complex instructions).
    
        The memory should model a standard Harvard architecture with completely
    separate instruction and data memories (Note: for simplicity, instructions
    wil be directly read into the processor rather than first being loaded into
    RAM and executed from there).
    
        In terms of hardware level support for data types, the following is a
    list of what is (R)equired to be well supported/optimized, (D)ecently
    supported/optimized, and (O)ptionally supported/optimized:
        (R) 1-byte signed/unsigned integers
        (R) 2-byte signed/unsigned integers
        (R) 4-byte signed/unsigned integers
        (D) 8-byte signed/unsigned integers
        (O) 4-byte floating point
        (O) 8-byte floating point
    
    Instruction Set Architecure (ISA):
        The 
    
    Cache/Memory Specifications:
    
    Verification/Validation Metrics:
    
    Limitations:

================================================================================
Compiler: